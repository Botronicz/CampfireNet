using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Security.Cryptography;

namespace CampfireNet.Security
{
    public static class __HackPrivateKeyUtilities {
       public static byte[] __HACK_ROOT_PRIVATE_KEY = new byte[] { 0, 1, 0, 0, 30, 229, 53, 10, 253, 233, 60, 163, 88, 177, 14, 119, 13, 154, 27, 173, 87, 132, 2, 225, 53, 11, 50, 96, 76, 104, 76, 207, 162, 35, 106, 222, 47, 67, 81, 34, 64, 254, 105, 206, 121, 78, 242, 16, 93, 47, 96, 11, 35, 190, 25, 78, 23, 9, 147, 139, 218, 23, 102, 5, 71, 55, 93, 58, 206, 111, 134, 31, 90, 232, 226, 22, 64, 115, 203, 72, 132, 200, 44, 214, 177, 93, 88, 2, 249, 194, 32, 190, 7, 127, 52, 164, 109, 188, 79, 106, 218, 169, 251, 172, 220, 215, 152, 114, 136, 82, 41, 255, 161, 134, 196, 77, 68, 13, 34, 11, 131, 209, 88, 115, 160, 142, 168, 238, 71, 110, 254, 102, 116, 232, 41, 224, 19, 241, 65, 155, 11, 167, 66, 158, 97, 206, 186, 219, 95, 199, 122, 234, 82, 254, 132, 159, 7, 4, 189, 255, 194, 0, 33, 81, 75, 94, 178, 95, 22, 186, 59, 73, 196, 1, 179, 244, 180, 28, 80, 125, 65, 24, 90, 142, 134, 229, 223, 77, 82, 18, 121, 111, 10, 33, 23, 136, 128, 178, 102, 79, 42, 98, 182, 202, 31, 208, 52, 67, 167, 167, 94, 12, 214, 48, 214, 167, 57, 10, 79, 92, 123, 102, 211, 153, 28, 187, 147, 19, 10, 205, 121, 229, 46, 241, 21, 246, 202, 235, 251, 202, 235, 205, 121, 41, 205, 122, 102, 211, 100, 17, 15, 252, 1, 53, 151, 40, 190, 198, 32, 129, 128, 0, 0, 0, 116, 88, 140, 117, 159, 192, 125, 26, 175, 141, 86, 123, 2, 238, 251, 111, 92, 49, 61, 37, 229, 124, 186, 83, 34, 155, 149, 68, 10, 159, 72, 137, 14, 108, 204, 226, 183, 144, 207, 194, 213, 50, 168, 206, 27, 13, 137, 240, 229, 96, 46, 174, 166, 15, 64, 16, 21, 7, 148, 207, 131, 243, 149, 23, 88, 187, 124, 143, 48, 199, 129, 101, 130, 159, 237, 67, 193, 77, 162, 209, 242, 141, 65, 219, 74, 65, 186, 139, 243, 0, 224, 3, 88, 36, 161, 158, 77, 184, 215, 122, 88, 164, 79, 159, 148, 200, 100, 158, 92, 2, 47, 228, 94, 174, 48, 233, 112, 227, 186, 180, 57, 216, 147, 106, 122, 14, 127, 49, 128, 0, 0, 0, 199, 45, 156, 181, 153, 97, 3, 87, 148, 30, 103, 245, 157, 125, 227, 91, 63, 84, 72, 167, 109, 9, 104, 202, 66, 246, 167, 15, 171, 230, 210, 130, 79, 157, 97, 39, 254, 142, 254, 240, 85, 179, 67, 36, 115, 63, 129, 213, 131, 50, 24, 161, 192, 122, 8, 216, 164, 162, 86, 254, 28, 210, 208, 48, 152, 12, 29, 82, 199, 52, 145, 19, 82, 156, 255, 71, 173, 200, 89, 0, 186, 245, 230, 177, 61, 141, 162, 158, 197, 247, 20, 51, 78, 118, 31, 34, 115, 16, 81, 106, 173, 72, 199, 68, 251, 107, 249, 141, 37, 60, 254, 66, 100, 255, 212, 140, 216, 37, 129, 189, 142, 42, 59, 90, 105, 166, 184, 105, 3, 0, 0, 0, 1, 0, 1, 128, 0, 0, 0, 70, 227, 127, 153, 0, 184, 32, 105, 103, 25, 81, 179, 214, 216, 167, 240, 51, 64, 94, 8, 209, 155, 228, 255, 217, 242, 116, 147, 236, 140, 245, 217, 240, 191, 252, 132, 232, 160, 67, 199, 193, 98, 205, 133, 48, 15, 173, 77, 187, 122, 99, 209, 196, 93, 60, 43, 21, 202, 128, 145, 166, 195, 141, 151, 159, 38, 144, 19, 58, 171, 121, 165, 97, 163, 76, 86, 228, 113, 130, 120, 7, 42, 170, 167, 99, 139, 130, 101, 197, 4, 45, 3, 236, 61, 110, 84, 127, 236, 104, 121, 198, 116, 8, 91, 133, 52, 146, 38, 2, 243, 195, 13, 138, 48, 153, 64, 63, 242, 94, 156, 189, 203, 227, 193, 198, 128, 145, 226, 0, 1, 0, 0, 150, 138, 182, 244, 16, 173, 123, 59, 212, 20, 21, 81, 206, 156, 122, 183, 158, 147, 15, 93, 57, 115, 94, 169, 173, 220, 236, 237, 93, 131, 40, 224, 84, 176, 124, 91, 63, 178, 218, 133, 94, 159, 144, 134, 229, 20, 236, 16, 15, 103, 17, 43, 249, 75, 59, 56, 162, 252, 254, 174, 55, 190, 0, 30, 17, 5, 174, 190, 110, 43, 145, 72, 242, 75, 249, 253, 203, 25, 166, 94, 114, 168, 130, 166, 215, 200, 198, 65, 103, 76, 142, 34, 136, 172, 158, 9, 181, 103, 159, 229, 170, 228, 31, 26, 101, 30, 117, 169, 50, 201, 241, 20, 17, 103, 119, 187, 151, 85, 21, 173, 183, 241, 222, 15, 235, 61, 92, 88, 139, 188, 140, 52, 168, 85, 12, 103, 133, 15, 76, 226, 232, 169, 160, 28, 167, 50, 182, 213, 15, 232, 113, 254, 186, 204, 24, 245, 177, 14, 129, 212, 58, 156, 44, 39, 21, 233, 14, 218, 141, 63, 48, 38, 59, 215, 72, 213, 1, 133, 91, 126, 106, 186, 114, 167, 51, 162, 197, 238, 0, 59, 209, 51, 141, 98, 0, 91, 173, 155, 146, 153, 37, 210, 85, 250, 65, 77, 25, 7, 110, 170, 82, 13, 209, 195, 32, 194, 74, 8, 82, 147, 221, 30, 196, 185, 84, 140, 193, 197, 230, 131, 206, 230, 140, 138, 208, 215, 147, 164, 69, 202, 176, 71, 132, 235, 170, 180, 231, 176, 85, 240, 121, 72, 13, 121, 122, 149, 128, 0, 0, 0, 182, 9, 84, 211, 56, 147, 151, 17, 209, 206, 220, 190, 108, 151, 162, 16, 199, 200, 69, 8, 66, 193, 110, 254, 80, 17, 66, 52, 158, 242, 207, 220, 64, 166, 3, 116, 205, 152, 21, 199, 164, 216, 231, 81, 208, 243, 57, 255, 20, 62, 11, 208, 22, 197, 129, 127, 15, 250, 224, 159, 139, 66, 233, 51, 247, 111, 191, 109, 152, 196, 6, 242, 246, 195, 5, 232, 118, 22, 16, 93, 82, 80, 57, 116, 1, 171, 41, 156, 202, 221, 44, 253, 75, 33, 120, 227, 127, 72, 99, 82, 116, 19, 186, 233, 179, 113, 230, 85, 229, 188, 62, 203, 121, 61, 168, 131, 224, 108, 7, 16, 152, 185, 61, 148, 229, 74, 178, 209, 128, 0, 0, 0, 211, 181, 114, 136, 49, 47, 181, 111, 7, 95, 175, 145, 157, 72, 18, 163, 123, 43, 90, 188, 52, 183, 104, 39, 113, 62, 96, 247, 51, 175, 114, 36, 50, 115, 249, 156, 153, 251, 150, 171, 194, 136, 120, 35, 162, 46, 197, 154, 101, 235, 137, 222, 87, 57, 19, 247, 30, 250, 62, 110, 44, 203, 127, 179, 231, 129, 171, 173, 139, 117, 245, 39, 153, 144, 150, 39, 67, 222, 29, 123, 179, 221, 75, 243, 177, 214, 221, 4, 122, 108, 95, 222, 169, 167, 107, 194, 254, 6, 224, 170, 82, 214, 78, 254, 100, 84, 209, 220, 44, 13, 119, 127, 154, 60, 172, 172, 104, 103, 240, 102, 196, 175, 64, 76, 174, 158, 84, 133 };

      public static byte[] SerializePrivateKey(RSACryptoServiceProvider rsa) {
         var p = rsa.ExportParameters(true);
         using (var ms = new MemoryStream())
         using (var writer = new BinaryWriter(ms)) {
            writer.WriteLengthPrefixedBuffer(p.D);
            writer.WriteLengthPrefixedBuffer(p.DP);
            writer.WriteLengthPrefixedBuffer(p.DQ);
            writer.WriteLengthPrefixedBuffer(p.Exponent);
            writer.WriteLengthPrefixedBuffer(p.InverseQ);
            writer.WriteLengthPrefixedBuffer(p.Modulus);
            writer.WriteLengthPrefixedBuffer(p.P);
            writer.WriteLengthPrefixedBuffer(p.Q);
            return ms.ToArray();
         }
      }

      public static RSACryptoServiceProvider DeserializePrivateKey(byte[] data) {
         var rsa = new RSACryptoServiceProvider();
         using (var ms = new MemoryStream(data))
         using (var reader = new BinaryReader(ms)) {
            rsa.ImportParameters(new RSAParameters {
               D = reader.ReadLengthPrefixedBuffer(),
               DP = reader.ReadLengthPrefixedBuffer(),
               DQ = reader.ReadLengthPrefixedBuffer(),
               Exponent = reader.ReadLengthPrefixedBuffer(),
               InverseQ = reader.ReadLengthPrefixedBuffer(),
               Modulus = reader.ReadLengthPrefixedBuffer(),
               P = reader.ReadLengthPrefixedBuffer(),
               Q = reader.ReadLengthPrefixedBuffer(),
            });
         }
         return rsa;
      }

      private static void WriteLengthPrefixedBuffer(this BinaryWriter w, byte[] b) {
         w.Write((int)b.Length);
         w.Write(b);
      }

      private static byte[] ReadLengthPrefixedBuffer(this BinaryReader r) {
         return r.ReadBytes(r.ReadInt32());
      }
   }
}
