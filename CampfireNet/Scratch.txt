
			btAdapter = BluetoothAdapter.DefaultAdapter;

         
			if (!btAdapter.IsEnabled)
			{
				Debug("Enabling bluetooth", WARNING);
				Intent enableBtIntent = new Intent(BluetoothAdapter.ActionRequestEnable);
				StartActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
			}

         
			if (btAdapter.ScanMode != ScanMode.ConnectableDiscoverable)
			{
				Debug("Making device discoverable", WARNING);
				Intent discoverableIntent = new Intent(BluetoothAdapter.ActionRequestDiscoverable);
				discoverableIntent.PutExtra(BluetoothAdapter.ExtraDiscoverableDuration, 300);
				StartActivity(discoverableIntent);
			}

         
                  // Get the BluetoothDevice object from the Intent
                  //               string nameAndMac = $"{device.Name}: {device.Address}";
                  //               if (chat.deviceListAdapter.GetPosition(nameAndMac) < 0) {
                  //                  chat.deviceListAdapter.Add(nameAndMac);
                  //                  chat.deviceList.SmoothScrollToPosition(chat.deviceListAdapter.Count - 1);
                  //               }

         filter.AddAction(BluetoothDevice.ActionPairingRequest);

                  
      case BluetoothDevice.ActionPairingRequest:
         int pin = intent.GetIntExtra(BluetoothDevice.ExtraPairingKey, 0);
         // chat.Debug($"PIN {pin} for {device.Name}");

         var pinBytes = Encoding.UTF8.GetBytes("" + pin);
         device.SetPin(pinBytes);
         device.SetPairingConfirmation(true);
         break;


         deviceList.ItemClick += (object sender, AdapterView.ItemClickEventArgs e) => {
            string nameAndMac = deviceListAdapter.GetItem(e.Position);
            string mac = nameAndMac.Substring(nameAndMac.Length - MAC_STRING_LENGTH);

            Regex macRegex = new Regex("([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}");

            if (macRegex.IsMatch(mac)) {
               Log($"Starting connection to {mac}");
               server.AddConnection(mac);
            } else {
               Debug("Regex failed", WARNING);
            }

         };
         

      protected void Log(string text) {
         logAdapter.Add(text);
         log.SmoothScrollToPosition(logAdapter.Count - 1);
         Debug($"Writing text {text} to log");
      }
      
         //         discoverButton.Click += (object sender, EventArgs e) => {
//            Debug("Discovery button clicked");
//         };
//
//         beServer.Click += (object sender, EventArgs e) => {
//            Log("I is a server!");
//            Debug("Server button clicked");
//         };
//
//         beClient.Click += (object sender, EventArgs e) => {
//            Log("I is a client!");
//            Debug("Client button clicked");
//         };
//
//         sendTextButton.Click += (object sender, EventArgs e) => {
//            Debug($"Sending text {inputText.Text} to {server.connectThreads.Count} threads");
//
//            foreach (KeyValuePair<ChatServer.ConnectThread, bool> threadPair in server.connectThreads) {
//               if (threadPair.Value) {
//                  threadPair.Key.Write(Encoding.UTF8.GetBytes(inputText.Text));
//                  Debug($"Sending text to {threadPair.Key}");
//               } else {
//                  Debug($"Skipping message send to dead thread {threadPair.Key}", WARNING);
//               }
//            }
//
//            Log($"Me ({server.connectThreads.Count}): {inputText.Text}");
//            inputText.Text = "";
//         };


      public const int LOG_MESSAGE = 1;
      public const int MAC_STRING_LENGTH = 17;

      private Button discoverButton;
      private ListView deviceList;
      private Button beServer;
      private Button beClient;
      private ListView log;
      private EditText inputText;
      private Button sendTextButton;

      private BluetoothAdapter btAdapter;

      private ArrayAdapter<string> deviceListAdapter;
      private ArrayAdapter<string> logAdapter;

      private ChatServer server;

      

         Debug("OnStop()");

         if (server.acceptThread != null) {
            server.acceptThread.Cancel();
            server.acceptThread = null;
         }

         foreach (KeyValuePair<ChatServer.ConnectThread, bool> threadPair in server.connectThreads) {
            threadPair.Key.Pause();
            server.connectThreads[threadPair.Key] = false;
         }

         // Unregister broadcast listeners
         UnregisterReceiver(receiver);
         receiver = null;


         // Make sure we're not doing discovery anymore
         if (btAdapter != null) {
            btAdapter.CancelDiscovery();

            btAdapter = null;
         }